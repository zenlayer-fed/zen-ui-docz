(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{C6aR:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return j}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk"),t("edPH");var r=t("O4TD"),i=t("/FXl"),l=t("TjRS"),a=t("ZFoC"),o=t("kU0+");t("aD51");function d(){return(d=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"components/form/index.mdx"}});var c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(i.b)("div",n)}},m=c("Form"),p=c("Field"),u=c("FieldError"),s={_frontmatter:b},f=l.a;function j(e){var n,t=e.components,c=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(i.b)(f,d({},s,c,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"form-状态管理"},"form 状态管理"),Object(i.b)("h2",{id:"何时使用"},"何时使用"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"当你需要存储表单数据，处理校验逻辑时")),Object(i.b)("h2",{id:"基本用法"},"基本用法"),Object(i.b)(a.c,{__position:0,__code:"<App />",__scope:(n={props:c,DefaultLayout:l.a,Playground:a.c,Props:a.d,form:r.default,App:o.a},n.DefaultLayout=l.a,n._frontmatter=b,n),mdxType:"Playground"},Object(i.b)(o.a,{mdxType:"App"})),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",d({parentName:"pre"},{className:"language-js"}),"import * as React from 'react';\nimport { useEffect } from 'react';\nimport { Form, Field, useForm, FieldError } from './Form';\nconst required = (val: any) => {\n  if (!val || val === '') {\n    throw 'required';\n  }\n};\nconst validations = {\n  name: [required],\n  gender: [required],\n};\nconst App = () => {\n  const form = useForm({ validations });\n  useEffect(() => {\n    form.initData({\n      name: '',\n      gender: '',\n    });\n  }, []);\n  return (\n    <Form {...form}>\n      <div>\n        <div>\n          name\n          <Field field=\"name\">\n            <input\n              onBlur={() => {\n                form.validateField('name2');\n              }}\n            />\n          </Field>\n          <FieldError field=\"name\">\n            {(error) => <div style={{ color: 'blue' }}>{error}</div>}\n          </FieldError>\n        </div>\n        <div>\n          gender\n          <Field field=\"gender\">\n            <input />\n          </Field>\n          <FieldError field=\"gender\" />\n        </div>\n      </div>\n      <button\n        onClick={() => {\n          const [ok, data] = form.canSubmit();\n          if (ok) {\n            alert(`验证通过: ${JSON.stringify(data, null, 2)}`);\n          }\n        }}\n      >\n        submit\n      </button>\n    </Form>\n  );\n};\nexport default App;\n")),Object(i.b)("p",null,"⚠️ 注意: 对象内置字段和数组的验证方法请参照",Object(i.b)("inlineCode",{parentName:"p"},"demo/App.tsx"),"文件"),Object(i.b)("h2",{id:"api-reference"},"API Reference"),Object(i.b)("pre",null,Object(i.b)("code",d({parentName:"pre"},{className:"language-ts"}),"//validator可以为异步函数\ntype Validator = (\n  val: any /*当前字段值*/,\n  data: any /*当前表单值, 用于跨字段验证*/\n) => never | void | Promise<void>;\ntype ValidatorObj = { [key: string]: Validator[] | ValidatorObj };\nconst form = useForm({ validations });\n")),Object(i.b)("h2",{id:"useform-validation-validatorobj--formutils"},"useForm: (validation: ValidatorObj) => FormUtils"),Object(i.b)("h4",{id:"formutils"},"FormUtils"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"setFieldData: (field: string, value: any, needValidate?: boolean) => void"),": 设置字段的值"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"setFieldError: (field: string, value: string | undefined) => void"),": 设置字段的错误信息"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"setFieldTouch: (field: string, value: boolean) => void"),": 设置字段是否被 touch 过"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"initData: (initValue: any) => void"),": 设置表单的初始值, 只有初始化过的 field 才能触发验证"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"canSubmit: () => [boolean, any]"),": 表单数据是否通过验证, 如果返回第一个值为 true, 第二个值就是表单数据; 如果第一个值为 false, 第二个值就是错误对象; 触发该函数时, 所有字段都会被 touch"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"getField: (field: string, default?: any) => any"),": 获取表单数据中的某个 feild 的值"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"getError: (field: string) => string | undefined"),": 获取表单某个 field 的错误信息"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"getTouch: (field: string) => boolean"),": 获取字段是否被 touch 过"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"arrayAppend: (field: string, data: any) => void"),": field 是数组时用来 append 数组"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"arrayRemove: (field: string) => void"),": field 是数组时用来移除数组的某一项")),Object(i.b)("h2",{id:"-children-form-formutils---children-jsxelement--jsxelement-"},"\\",Object(i.b)(m,{mdxType:"Form"}),": ({children, ...form}: FormUtils & { children: JSX.Element | JSX.Element[] })"),Object(i.b)("p",null,"该组件是一个 ",Object(i.b)("inlineCode",{parentName:"p"},"Context Provider"),", 为其下面的 ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," 和 ",Object(i.b)("inlineCode",{parentName:"p"},"FieldError")," 提供 ",Object(i.b)("inlineCode",{parentName:"p"},"FormUtils对象")),Object(i.b)("h2",{id:"-children-field--children-jsxelement-field-string---jsxelement"},"\\",Object(i.b)(p,{mdxType:"Field"}),": ({children, field}: { children: JSX.Element; field: string; }) => JSX.Element"),Object(i.b)("p",null,"该组件用于关联某个 field 和它实际绑定的 UI 元素, ",Object(i.b)("inlineCode",{parentName:"p"},"Field"),"会向其",Object(i.b)("inlineCode",{parentName:"p"},"chilren"),"注入 ",Object(i.b)("inlineCode",{parentName:"p"},"value"),", 和 ",Object(i.b)("inlineCode",{parentName:"p"},"onChange")),Object(i.b)("p",null,"⚠️ 注意: 如果用户自己传了",Object(i.b)("inlineCode",{parentName:"p"},"onChange"),", 则会调用用户自己的 ",Object(i.b)("inlineCode",{parentName:"p"},"onChange"),", 该组件只能在",Object(i.b)("inlineCode",{parentName:"p"},"<Form/>"),"下生效"),Object(i.b)("pre",null,Object(i.b)("code",d({parentName:"pre"},{className:"language-jsx"}),'<Form {...form}>\n  <Field field="name">\n    <SomeUIElement />\n  </Field>\n</Form>\n')),Object(i.b)("p",null,"👇 实际"),Object(i.b)("pre",null,Object(i.b)("code",d({parentName:"pre"},{className:"language-jsx"}),"<Form {...form}>\n  <SomeUIElement\n    value={getField('name')}\n    onChange={(val) => {\n      setFieldData(field, val); //这里会设置field的value和触发验证\n      setFieldTouch(field, true);\n    }}\n  />\n</Form>\n")),Object(i.b)("h2",{id:"-field-children-field-string-childrenerror-string--jsxelement--jsxelement"},"\\",Object(i.b)(u,{mdxType:"FieldError"}),": ({field, children}: {field: string, children?:(error: string) => JSX.Element}) => JSX.Element"),Object(i.b)("p",null,"该组件用于显示某个 field 的错误信息(只有 field 被 touch 过后才显示)"),Object(i.b)("pre",null,Object(i.b)("code",d({parentName:"pre"},{className:"language-jsx"}),'<Form {...form}>\n  <FieldError field="name" />\n</Form>\n')),Object(i.b)("p",null,"👇 实际"),Object(i.b)("pre",null,Object(i.b)("code",d({parentName:"pre"},{className:"language-jsx"}),"<Form {...form}>\n  {getTouch('name') && getError('name') ? (\n    children ? (\n      children(getError('name'))\n    ) : (\n      <div style={{ verticalAlign: 'top', color: 'red' }}>\n        {getError('name')}\n      </div>\n    )\n  ) : null}\n</Form>\n")))}void 0!==j&&j&&j===Object(j)&&Object.isExtensible(j)&&!j.hasOwnProperty("__filemeta")&&Object.defineProperty(j,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"components/form/index.mdx"}}),j.isMDXComponent=!0}}]);
//# sourceMappingURL=component---components-form-index-mdx-080a70eec117706d79b1.js.map