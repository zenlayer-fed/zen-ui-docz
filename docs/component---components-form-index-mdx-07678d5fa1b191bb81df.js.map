{"version":3,"sources":["webpack:///../components/form/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Form","Field","FieldError","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","Props","form","App","isMDXComponent"],"mappings":"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","file":"component---components-form-index-mdx-07678d5fa1b191bb81df.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/zenlayer/Documents/HZ_FE/zen-ui-new/zen-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { form } from '@zenlayer/zen-ui';\nimport App from './demo/App.tsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Form = makeShortcode(\"Form\");\nconst Field = makeShortcode(\"Field\");\nconst FieldError = makeShortcode(\"FieldError\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"form-状态管理\"\n    }}>{`form 状态管理`}</h1>\n    <h2 {...{\n      \"id\": \"何时使用\"\n    }}>{`何时使用`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`当你需要存储表单数据，处理校验逻辑时`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"基本用法\"\n    }}>{`基本用法`}</h2>\n    <Playground __position={0} __code={'<App />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      form,\n      App,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <App mdxType=\"App\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import * as React from 'react';\nimport { useEffect } from 'react';\nimport { Form, Field, useForm, FieldError } from './Form';\nconst required = (val: any) => {\n  if (!val || val === '') {\n    throw 'required';\n  }\n};\nconst validations = {\n  name: [required],\n  gender: [required],\n};\nconst App = () => {\n  const form = useForm({ validations });\n  useEffect(() => {\n    form.initData({\n      name: '',\n      gender: '',\n    });\n  }, []);\n  return (\n    <Form {...form}>\n      <div>\n        <div>\n          name\n          <Field field=\"name\">\n            <input\n              onBlur={() => {\n                form.validateField('name2');\n              }}\n            />\n          </Field>\n          <FieldError field=\"name\">\n            {(error) => <div style={{ color: 'blue' }}>{error}</div>}\n          </FieldError>\n        </div>\n        <div>\n          gender\n          <Field field=\"gender\">\n            <input />\n          </Field>\n          <FieldError field=\"gender\" />\n        </div>\n      </div>\n      <button\n        onClick={() => {\n          const [ok, data] = form.canSubmit();\n          if (ok) {\n            alert(\\`验证通过: \\${JSON.stringify(data, null, 2)}\\`);\n          }\n        }}\n      >\n        submit\n      </button>\n    </Form>\n  );\n};\nexport default App;\n`}</code></pre>\n    <p>{`⚠️ 注意: 对象内置字段和数组的验证方法请参照`}<inlineCode parentName=\"p\">{`demo/App.tsx`}</inlineCode>{`文件`}</p>\n    <h2 {...{\n      \"id\": \"api-reference\"\n    }}>{`API Reference`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`//validator可以为异步函数\ntype Validator = (\n  val: any /*当前字段值*/,\n  data: any /*当前表单值, 用于跨字段验证*/\n) => never | void | Promise<void>;\ntype ValidatorObj = { [key: string]: Validator[] | ValidatorObj };\nconst form = useForm({ validations });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useform-validation-validatorobj--formutils\"\n    }}>{`useForm: (validation: ValidatorObj) => FormUtils`}</h2>\n    <h4 {...{\n      \"id\": \"formutils\"\n    }}>{`FormUtils`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setFieldData: (field: string, value: any, needValidate?: boolean) => void`}</inlineCode>{`: 设置字段的值`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setFieldError: (field: string, value: string | undefined) => void`}</inlineCode>{`: 设置字段的错误信息`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setFieldTouch: (field: string, value: boolean) => void`}</inlineCode>{`: 设置字段是否被 touch 过`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initData: (initValue: any) => void`}</inlineCode>{`: 设置表单的初始值, 只有初始化过的 field 才能触发验证`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`canSubmit: () => [boolean, any]`}</inlineCode>{`: 表单数据是否通过验证, 如果返回第一个值为 true, 第二个值就是表单数据; 如果第一个值为 false, 第二个值就是错误对象; 触发该函数时, 所有字段都会被 touch`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getField: (field: string, default?: any) => any`}</inlineCode>{`: 获取表单数据中的某个 feild 的值`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getError: (field: string) => string | undefined`}</inlineCode>{`: 获取表单某个 field 的错误信息`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getTouch: (field: string) => boolean`}</inlineCode>{`: 获取字段是否被 touch 过`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`arrayAppend: (field: string, data: any) => void`}</inlineCode>{`: field 是数组时用来 append 数组`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`arrayRemove: (field: string) => void`}</inlineCode>{`: field 是数组时用来移除数组的某一项`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"-children-form-formutils---children-jsxelement--jsxelement-\"\n    }}>{`\\\\`}<Form mdxType=\"Form\" />{`: ({children, ...form}: FormUtils & { children: JSX.Element | JSX.Element[] })`}</h2>\n    <p>{`该组件是一个 `}<inlineCode parentName=\"p\">{`Context Provider`}</inlineCode>{`, 为其下面的 `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`FieldError`}</inlineCode>{` 提供 `}<inlineCode parentName=\"p\">{`FormUtils对象`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"-children-field--children-jsxelement-field-string---jsxelement\"\n    }}>{`\\\\`}<Field mdxType=\"Field\" />{`: ({children, field}: { children: JSX.Element; field: string; }) => JSX.Element`}</h2>\n    <p>{`该组件用于关联某个 field 和它实际绑定的 UI 元素, `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`会向其`}<inlineCode parentName=\"p\">{`chilren`}</inlineCode>{`注入 `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`, 和 `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode></p>\n    <p>{`⚠️ 注意: 如果用户自己传了`}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`, 则会调用用户自己的 `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`, 该组件只能在`}<inlineCode parentName=\"p\">{`<Form/>`}</inlineCode>{`下生效`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Form {...form}>\n  <Field field=\"name\">\n    <SomeUIElement />\n  </Field>\n</Form>\n`}</code></pre>\n    <p>{`👇 实际`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Form {...form}>\n  <SomeUIElement\n    value={getField('name')}\n    onChange={(val) => {\n      setFieldData(field, val); //这里会设置field的value和触发验证\n      setFieldTouch(field, true);\n    }}\n  />\n</Form>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-field-children-field-string-childrenerror-string--jsxelement--jsxelement\"\n    }}>{`\\\\`}<FieldError mdxType=\"FieldError\" />{`: ({field, children}: {field: string, children?:(error: string) => JSX.Element}) => JSX.Element`}</h2>\n    <p>{`该组件用于显示某个 field 的错误信息(只有 field 被 touch 过后才显示)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Form {...form}>\n  <FieldError field=\"name\" />\n</Form>\n`}</code></pre>\n    <p>{`👇 实际`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Form {...form}>\n  {getTouch('name') && getError('name') ? (\n    children ? (\n      children(getError('name'))\n    ) : (\n      <div style={{ verticalAlign: 'top', color: 'red' }}>\n        {getError('name')}\n      </div>\n    )\n  ) : null}\n</Form>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}